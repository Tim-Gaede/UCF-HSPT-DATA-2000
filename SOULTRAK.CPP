/***************************************************************************/
/*                      UCF ACM/UPE Fourteenth Annual                      */
/*                    High School Programming Tournament                   */
/*                                                                         */
/* Problem Name: Soul Tracker                                              */
/*                                                                         */
/* Problem by: Eric Heimburg                                               */
/* Solution by: Michael Kujawa                                             */
/***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define bool int
#define true 1
#define false 0

//The Items array is used to map item names to numbers
char Items[100][100];
int nItems;

/*
  A struct to store what each friend has and wants.
  The bUsed member stores whether this trade has been considered yet
   (each trade need only be considered once)

  Note that, in graph theory, each friend corresponds to an 
  "edge" in the graph, each item corresponds to a "node" in
  the graph, and a sequence of trades is possible if a path
  exists from the "Genesis CD" to "Homogenic CD".
*/
struct TFriend
{
   int Has;
   int Wants;
   bool bUsed;
} Friends[20];
int nFriends;




/* AddItem
   AddItem maps an Item name to a index in the Items array, adding the Item
   name if neccessary.  An Item name will only appear once in the Items array,
   so it's index is a unique identifier for that item.
*/
int AddItem(char *ItemName)
{
int idx;

    for (idx=0; idx < nItems; idx++)
        if (strcmp(Items[idx], ItemName) == 0)
            return idx;

    nItems++;
    strcpy(Items[idx], ItemName);
    return idx; 
}




/* AddFriend
   AddFriend adds a new entry in the Friends array, which incurs two calls to
   AddItem.  AddFriend also initializes the bUsed member to false.
*/
void AddFriend(char *Has, char *Wants)
{
char *p;
    p = strchr(Has, '\n');
    if (p) *p = 0;

    p = strchr(Wants, '\n');
    if (p) *p = 0;

    Friends[nFriends].Has = AddItem(Has);
    Friends[nFriends].Wants = AddItem(Wants);
    Friends[nFriends].bUsed = false;
    nFriends++;
}



/* bFindAWay
   bFindAWay recurses through the list of friends trying to find a way to
   trade from 'FromItem' to 'ToItem'.  The technique used here is equivelant
   to a "Depth First Search" on a graph.  

   From a given FromItem, all the friends are looked at to see what
   ToItems can be generated by trading that FromItem.  
   
   Since, at a given level of recursion, ALL the possible ToItems are
   considered for the FromItem, those trades are marked as used so they wont be
   considered again.  Otherwise, the recursion could run forever if a cycle
   were present (A has 2, wants 1, B has 1, wants 2).
*/
bool bFindAWay(int FromItem, int ToItem)
{
    if (FromItem == ToItem)
        return true;

    for (int i=0; i < nFriends; i++)
    {
        if (!Friends[i].bUsed && (Friends[i].Wants == FromItem))
        {
            Friends[i].bUsed = true;
            if (bFindAWay(Friends[i].Has, ToItem))
                return true;
        }
    }

    return false;
}




void main()
{
int M, N;
char buf[256];

    FILE *F = fopen("soultrak.in", "r");
    fgets(buf, sizeof(buf), F);
    sscanf(buf, "%d", &N);
    for (int n=0; n < N; n++)
    {
        nItems = 0;
        nFriends = 0;
        int mycd = AddItem("Genesis CD");
        int satancd = AddItem("Homogenic CD");

        fgets(buf, sizeof(buf), F);
        sscanf(buf, "%d", &M);
        for (int m=0; m < M; m++)
        {
        char Has[100];
        char Wants[100];
            fgets(buf, sizeof(buf), F);
            fgets(Wants, sizeof(Wants), F);
            fgets(Has, sizeof(Has), F);
            AddFriend(Has, Wants);
        }

        if (bFindAWay(mycd, satancd))
            printf("I can get my soul back!\n");
        else
            printf("I am doomed to hell for all eternity!\n");
    }
}
